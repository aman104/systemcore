<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $username
 * @property string $api_token
 * @property string $api_secret
 * @property string $first_name
 * @property string $last_name
 * @property string $email
 * @property string $phone
 * @property string $street
 * @property string $post_code
 * @property string $city
 * @property string $country
 * @property boolean $is_company
 * @property string $nip
 * @property integer $status
 * @property integer $invoice_id
 * @property UserData $UserData
 * @property Doctrine_Collection $UserTestEmail
 * @property Doctrine_Collection $MailingLists
 * @property Doctrine_Collection $Mailing
 * @property Doctrine_Collection $Payment
 * 
 * @method string              getUsername()      Returns the current record's "username" value
 * @method string              getApiToken()      Returns the current record's "api_token" value
 * @method string              getApiSecret()     Returns the current record's "api_secret" value
 * @method string              getFirstName()     Returns the current record's "first_name" value
 * @method string              getLastName()      Returns the current record's "last_name" value
 * @method string              getEmail()         Returns the current record's "email" value
 * @method string              getPhone()         Returns the current record's "phone" value
 * @method string              getStreet()        Returns the current record's "street" value
 * @method string              getPostCode()      Returns the current record's "post_code" value
 * @method string              getCity()          Returns the current record's "city" value
 * @method string              getCountry()       Returns the current record's "country" value
 * @method boolean             getIsCompany()     Returns the current record's "is_company" value
 * @method string              getNip()           Returns the current record's "nip" value
 * @method integer             getStatus()        Returns the current record's "status" value
 * @method integer             getInvoiceId()     Returns the current record's "invoice_id" value
 * @method UserData            getUserData()      Returns the current record's "UserData" value
 * @method Doctrine_Collection getUserTestEmail() Returns the current record's "UserTestEmail" collection
 * @method Doctrine_Collection getMailingLists()  Returns the current record's "MailingLists" collection
 * @method Doctrine_Collection getMailing()       Returns the current record's "Mailing" collection
 * @method Doctrine_Collection getPayment()       Returns the current record's "Payment" collection
 * @method User                setUsername()      Sets the current record's "username" value
 * @method User                setApiToken()      Sets the current record's "api_token" value
 * @method User                setApiSecret()     Sets the current record's "api_secret" value
 * @method User                setFirstName()     Sets the current record's "first_name" value
 * @method User                setLastName()      Sets the current record's "last_name" value
 * @method User                setEmail()         Sets the current record's "email" value
 * @method User                setPhone()         Sets the current record's "phone" value
 * @method User                setStreet()        Sets the current record's "street" value
 * @method User                setPostCode()      Sets the current record's "post_code" value
 * @method User                setCity()          Sets the current record's "city" value
 * @method User                setCountry()       Sets the current record's "country" value
 * @method User                setIsCompany()     Sets the current record's "is_company" value
 * @method User                setNip()           Sets the current record's "nip" value
 * @method User                setStatus()        Sets the current record's "status" value
 * @method User                setInvoiceId()     Sets the current record's "invoice_id" value
 * @method User                setUserData()      Sets the current record's "UserData" value
 * @method User                setUserTestEmail() Sets the current record's "UserTestEmail" collection
 * @method User                setMailingLists()  Sets the current record's "MailingLists" collection
 * @method User                setMailing()       Sets the current record's "Mailing" collection
 * @method User                setPayment()       Sets the current record's "Payment" collection
 * 
 * @package    SystemCore
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUser extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('api_token', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('api_secret', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('first_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('last_name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 255,
             ));
        $this->hasColumn('phone', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('street', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('post_code', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('city', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('country', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('is_company', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('nip', 'string', 255, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('status', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             ));
        $this->hasColumn('invoice_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('UserData', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserTestEmail', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('MailingList as MailingLists', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Mailing', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Payment', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}